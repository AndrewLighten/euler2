import inspect
import os

from termcolor import colored
from timeit import default_timer as timer
from functions import factorise


def calculate():
    """
    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7th triangle number would be

        1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five
    divisors.

    What is the value of the first triangle number to have over five
    hundred divisors?
    """
    base = 1
    inc = 2
    while len(factorise(base)) < 500:
        base += inc
        inc += 1
    return base


if __name__ == "__main__":
    program = os.path.splitext(os.path.basename(__file__))[0]
    start = timer()
    print(colored("-" * 70, "red"))
    print(colored(program, "red"))
    print(colored(inspect.getdoc(calculate), "yellow"))
    print(f'> {colored(calculate(), "green", attrs=["dark"])}')
    delta = round(timer() - start, 4)
    print(f'(Finished in {colored(delta, "magenta")} seconds)')
    print(colored("-" * 70, "red"))
